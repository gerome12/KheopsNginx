server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}


upstream dicomweb_proxy {
  # The keepalive parameter sets the maximum number of idle keepalive connections
  # to upstream servers that are preserved in the cache of each worker process. When
  # this number is exceeded, the least recently used connections are closed.
  keepalive 128;

  server kheopsdicomwebproxy:8080;
}

limit_conn_zone $server_name zone=servers:10m;

server {

    listen 443 ssl http2;
    server_name ${server_name};

    limit_conn servers 1000;

    ssl_certificate           /run/secrets/fullchain1.pem;
    ssl_certificate_key       /run/secrets/privkey1.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES256-CCM8:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA38:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-CCM:DHE-RSA-AES256-CCM:DHE-RSA-AES128-CCM8:DHE-RSA-AES256-CCM8:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256;
    ssl_prefer_server_ciphers on;

    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_trusted_certificate /etc/nginx/chain.pem;

    resolver 127.0.0.11 ipv6=off;

    server_tokens off;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    access_log            /var/log/nginx/access.log main;
    error_log             /var/log/nginx/error.log warn;

    client_max_body_size    20000M;
    proxy_send_timeout      120;
    proxy_read_timeout      120;
    proxy_request_buffering off;
    proxy_buffering         off;

    error_page 490 = @kheopsAuthorization;
    error_page 491 = @kheopsDICOMwebProxy;
    error_page 492 = @kheopsZipper;
    
    location /secutrialtoken {
      proxy_pass http://kheopssecutrial:8080;
    }

    location /api {
      return 490; #kheopsAuthorization
    }

    # If we hit /studies exactly, we are dealing with a study level QIDO or STOW
    location = /api/studies {
      if ( $request_method = GET ) { return 490; } #kheopsAuthorization
      if ( $request_method = OPTIONS ) { return 490; } #kheopsAuthorization
      if ( $request_method = POST ) { return 491; } #kheopsDICOMwebProxy
    }

    # Anything with users is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/users {
      return 490; #kheopsAuthorization
    }

    # Anything with albums is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/albums {
      return 490; #kheopsAuthorization
    }

    # Instances goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Frames goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances/([0-9.]+)/frames/([0-9]+)$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Metadata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/metadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Metadata goes to the DICOMWebProxy
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/instances/([0-9.]+)/metadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # WADO and QIDO is for the dicomwebproxy, PUT and DELETE on the series is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+) {
      if ( $request_method = GET ) { return 491; } #kheopsDICOMwebProxy
      if ( $request_method != GET ) { return 490; } #kheopsAuthorization
    }

    # series level QIDO is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series$ {
      return 490; #kheopsAuthorization
    }

    # study level metadata requests are handled by the authorization server
    location  ~ ^/api/studies/([0-9.]+)/metadata$ {
      return 490; #kheopsAuthorization
    }

    # study level OHIF metadata requests are handled by the DICOMweb proxy
    location  ~ ^/api/studies/([0-9.]+)/ohifmetadata$ {
      return 491; #kheopsDICOMwebProxy
    }

    # series level instance QIDO requests are handled by the DICOMweb proxy
    location  ~ ^/api/studies/([0-9.]+)/instances$ {
      return 491; #kheopsDICOMwebProxy
    }

    # Anything with users is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/users {
      return 490; #kheopsAuthorization
    }

    # Anything with albums is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/albums {
      return 490; #kheopsAuthorization
    }

    # Anything with comments is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/comments {
      return 490; #kheopsAuthorization
    }

    # Anything with favorites is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/favorites {
      return 490; #kheopsAuthorization
    }

    # Anything with favorites is for the authorization server
    location  ~ ^/api/studies/([0-9.]+)/series/([0-9.]+)/favorites {
      return 490; #kheopsAuthorization
    }

    # STOW and WADO are for the kheopsDICOMwebProxy, ZIP is for the kheopsZipper, deleting a study or appropriate is for kheopsAuthorization
    location ~ ^/api/studies/[0-9.]+$ {
      if ( $request_method = PUT ) { return 490; } #kheopsAuthorization
      if ( $request_method = DELETE ) { return 490; } #kheopsAuthorization

      if ($http_accept ~ "application/zip") { return 492; } #kheopsZipper
      if ($arg_accept ~ "application/zip") { return 492; } #kheopsZipper
      if ($arg_accept ~ "application%2Fzip") { return 492; } #kheopsZipper

      return 491; #kheopsDICOMwebProxy
    }

    location  /api/wado {
      proxy_set_header Connection "";

      if ( $arg_requestType = "WADO" ) { return 491; } #kheopsDICOMwebProxy

      return 400 "requestType must be WADO";
    }

    location @kheopsAuthorization {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /authorization$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsAuthorization_url};

      proxy_redirect      ${kheopsAuthorization_url} ${root_url};
    }

    location @kheopsDICOMwebProxy {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /capabilities/password/dicomweb$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          http://dicomweb_proxy;

      proxy_redirect      http://dicomweb_proxy ${root_url};
    }

    location @kheopsZipper {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/api(.*)$ /zipper$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsZipper_url};

      proxy_redirect      ${kheopsZipper_url} ${root_url};
    }

    location ~ ^/api/link/[a-zA-Z0-9.+=_-]* {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      proxy_set_header        Authorization "Bearer $2";
      proxy_set_header        X-Link-Authorization "true";

      rewrite ^/(api/link/)([a-zA-Z0-9.+=_-]*)(.*)$ /api$3 break;

      proxy_pass ${root_url};
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      add_header              Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
      add_header              Content-Security-Policy "frame-ancestors 'none'; default-src 'none'; base-uri 'none'; script-src 'self' 'unsafe-eval'; child-src https://keycloak.kheops.online; connect-src 'self' https://keycloak.kheops.online; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com; form-action 'self'; object-src 'none'" always;
      add_header              X-Frame-Options "deny" always;
      add_header              X-XSS-Protection "1; mode=block" always;
      add_header              X-Content-Type-Options "nosniff" always;
      add_header              Referrer-Policy "strict-origin" always;
      add_header              Feature-Policy "geolocation 'none'; midi 'none'; notifications 'none'; push 'none'; sync-xhr 'self'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; vibrate 'none'; payment 'none'" always;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsWebUI_url};

      proxy_redirect      ${kheopsWebUI_url} ${root_url};
    }
}
